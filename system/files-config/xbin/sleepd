#!/system/bin/sh

log() {
    local uptime
    local rest
    read uptime rest < /proc/uptime
    /system/bin/log -p v -t sleepd "$1"
    echo "$uptime $1" >> /mnt/sdcard/sleepd.log
}

get_uptime() {
    local uptime
    read uptime < /proc/uptime
    echo ${uptime%%.*}
}

am() {
    CLASSPATH=/system/framework/am.jar /system/bin/app_process /system/bin com.android.commands.am.Am "$@"
}

powerkey() {
    CLASSPATH=/system/framework/input.jar /system/bin/app_process /system/bin com.android.commands.input.Input keyevent KEYCODE_POWER
}

enter_mode() {
    local pwrmode
    local t0
    local d
    local rc
    log "trying to enter mode $1 ..."
    t0=$(get_uptime)
    d=0
    rc=0
    powerkey
    while true
    do
        pwrmode=$(/system/bin/getprop sys.onyx.pwrmode)
        if [ "$pwrmode" = "$1" ]
        then
            rc=0
            break
        fi
        d=$(($(get_uptime)-t0))
        if [ $d -le 30 ]
        then
            powerkey
            log "generated powerkey event"
        else
            rc=1
            break
        fi
        sleep 0.3
    done
    log "enter_mode: $pwrmode, $d, $rc"
    return $rc
}


log "Started sleepd at $(busybox date)"
#/system/bin/busybox renice -15 $$
#echo 400000 > /sys/power/device_suspend_time_threshold

starttime=$(get_uptime)
lasttime=$((starttime+10))
time=$starttime
/system/bin/logcat | while read line
do
    if [ "$line" != "${line%/sleepd*}" ]
    then
        true  # ignore
    elif [ "$line" != "${line%Going to sleep by user request...*}" ]
    then
        log "$line"
        time=$(get_uptime)
        if [ $((time-lasttime)) -lt 10 ]
        then
            log "ignored request"
            time=$(get_uptime)
        else
            echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
            # is this sufficent already? does not seem so.
            #enter_mode mem
            enter_mode mem && enter_mode on && enter_mode mem
        fi
        lasttime=$(get_uptime)
    elif [ "$line" != "${line%Going to sleep*}" ]
    then
        log "$line"
    elif [ "$line" != "${line%SYSTEM POWER STATE*}" ]
    then
        log "$line"
        read governor < /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
        if [ "$governor" != "interactive" ]
        then
            echo interactive > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
            log "set governor to interactive"
        fi
    elif [ "$line" != "${line%Excessive delay in autosuspend_disable\(\) while turning screen on*}" ]
    then
        log "$line"
        if [ "$(/system/bin/getprop sys.onyx.pwrmode)" != "mem" ]
        then
            am broadcast -a refresh_screen
            log "refresh_screen requested"
        fi
    fi
done
