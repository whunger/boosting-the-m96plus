#!/system/bin/sh

if [ -z "$1" ]
then
    while true
    do
        /system/bin/logwrapper "$0" wrapped
        rc=$?
        [ $rc != 33 ] && break
    done
    exit $rc
fi

log() {
    echo >&2 "$1"
    [ -e "/mnt/sdcard/sleepd.log" ] && echo "$(/system/bin/busybox date) $1" >> /mnt/sdcard/sleepd.log
}

am() {
    CLASSPATH=/system/framework/am.jar /system/bin/app_process /system/bin com.android.commands.am.Am "$@"
}

settings() {
    CLASSPATH=/system/framework/settings.jar /system/bin/app_process /system/bin com.android.commands.settings.SettingsCmd "$@"
}

powerkey() {
    CLASSPATH=/system/framework/input.jar /system/bin/app_process /system/bin com.android.commands.input.Input keyevent KEYCODE_POWER
}

get_uptime() {
    local uptime
    read uptime < /proc/uptime
    echo ${uptime%%.*}
}

check_governor() {
    local governor
    read governor < /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    if [ "$governor" != "$1" ]
    then
        echo "$1" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
        log "set governor to $1"
        return 0
    fi
    return 1
}

sleepd() {
    # ignore log up to $marker
    while read line
    do
        [ "$line" != "${line%$marker*}" ] && break
    done

    # start reacting to messages
    time=$(get_uptime)
    ping_time=$((time+60))
    ping_count=0
    exit_time=$((time+3600*24))
    mode="on"
    suspend_time=0
    state=0  # state for simulated PWRBTN pushes
    sequence_start_time=0
    while read line
    do
        time=$(get_uptime)
        # check for messages to react to
        trigger=""
        case "$line" in
        */sleepd*)
            # Still in sync
            ping_time=$((time+60))
            ping_count=3
            continue  # loop, do not interpret own log messages
            ;;
        *WindowManager\(*\):\ Window\ freeze\ timeout\ expired.*)
            log "$line"
            trigger="refresh_screen"
            ;;
        *showSystemImage:\ index:-1*)
            log "$line"
            trigger="refresh_screen"
            ;;
        *showSystemImage:\ index:0*)
            log "$line"
            trigger="show_wallpaper"
            ;;
        *updatePowerState:\ Found\ IDLE\ transfer\ to\ MEM\ state*)
            log "$line"
            trigger="show_wallpaper"
            ;;
        *handleInterceptActions:\ Not\ passing\ key\ to\ user*)
            log "$line"
            #trigger="show_wallpaper"
            ;;
        *Going\ to\ sleep\ by\ user\ request...*)
            log "$line"
            trigger="show_wallpaper"
            ;;
        *Going\ to\ sleep\ due\ to\ screen\ timeout...*)
            log "$line"
            trigger="show_wallpaper"
            ;;
        *SYSTEM\ POWER\ STATE:\ \[mem\]*)
            log "$line"
            mode="mem"
            trigger="show_wallpaper"
            ;;
        *SYSTEM\ POWER\ STATE:\ \[on\]*)
            log "$line"
            mode="on"
            trigger="wakeup_or_sleep"
            ;;
        *SYSTEM\ POWER\ STATE:\ \[standby\]*)
            log "$line"
            mode="standby"
            trigger="throttle"
            ;;
        *Excessive\ delay*)
            log "$line"
            ;;
        *Going\ to\ sleep*)
            log "$line"
            ;;
        *showSystemImage:*)
            log "$line"
            ;;
        *handleInterceptActions:*)
            log "$line"
            ;;
        *screen*)
            log "$line"
            ;;
        *Power*)
            log "$line"
            ;;
        *power*)
            log "$line"
            ;;
        *POWER*)
            log "$line"
            ;;
        *update_to_display*)
            check_governor performance && log "$line"
            ;;
        esac
        if [ $time -ge $ping_time ] && [ $ping_count -gt 0 ]
        then
            # check if logcat - sleepd - logwrapper loop is still working
            log "ping"
            #echo >&2 "ping"
            ping_count=$((ping_count-1))
            ping_time=$((time+5))
            if [ $ping_count = 0 ]
            then
                exit_time=$((time+1))
            fi
        elif [ $time -ge $exit_time ]
        then
            log "exiting to induce restart"
            exit 33
        elif [ "$trigger" = "refresh_screen" ] && [ $time -gt $suspend_time ] && [ $mode = "on" ]
        then
            am broadcast -a refresh_screen
            suspend_time=$((time+5))
            log "refresh_screen requested"
        elif [ "$trigger" = "show_wallpaper" ] && [ $time -gt $suspend_time ] && [ $state = 0 ]
        then
            check_governor performance
            # Try to get rid of pops:
            /system/bin/tinymix "Playback Volume" 0
            powerkey
            state=1
            suspend_time=$((time+30))
            sequence_start_time=$time
            log "first simulated power button push, state=1"
        elif [ "$trigger" = "show_wallpaper" ] && [ $state = 2 ]
        then
            state=0  # time to do nothing, at last
            log "state=0"
        elif [ "$trigger" = "wakeup_or_sleep" ] && [ $state = 0 ]
        then
            check_governor interactive
            # Restore volume
            /system/bin/tinymix "Playback Volume" 250
            log "wakeup"
        elif [ "$trigger" = "wakeup_or_sleep" ]
        then
            if  [ $state = 1 ] && [ $((time-sequence_start_time)) -lt 5 ]
            then
                powerkey
                state=2
                log "second simulated power button push, state=2"
            else
                state=0
                log "reset to state=0"
            fi
        elif [ "$trigger" = "throttle" ]
        then
            check_governor interactive
            # Probably of no use:
            echo "0" > /sys/class/graphics/fb0/blank
            log "throttle"
        fi
    done
}


marker="== started sleepd $$ at $(busybox date) =="
log "$marker"

#/system/bin/busybox renice -10 $$
echo 400000 > /sys/power/device_suspend_time_threshold
/system/bin/busybox renice 19 $(/system/bin/busybox pgrep "mmcqd/1")

# Testing: Can we do s.th. against loudspeaker pops?
/system/bin/tinymix "Capture Volume" 0
/system/bin/tinymix "Right Boost Mixer RINPUT1 Switch" 0
/system/bin/tinymix "Left Boost Mixer LINPUT1 Switch" 0

#settings set system screen_off_timeout 300000
log "System's screen off timeout is set to $(($(settings get system screen_off_timeout)/1000)) s"

/system/bin/logcat -b system -b main -b events | sleepd

# Todo: React to these by waking the device up?
#10-03 20:06:01.070 D/InputManager-JNI( 2371): handleInterceptActions: Waking up.
#10-03 20:06:01.090 I/InputDispatcher( 2371): Dropped event because input dispatch is disabled.
#10-03 20:06:01.090 D/pms     ( 2371): userActivityNoUpdateLocked: reject all events except the POWER/FORCE_WAKEUP key
#10-15 09:30:04.330 W/audio_hw_primary( 2017): set parameters screen_state=off

# No use: Fixing brightness with
# /sys/devices/platform/pwm-backlight.0/backlight/pwm-backlight.0/actual_brightness
# /sys/devices/platform/pwm-backlight.0/backlight/pwm-backlight.0/brightness
