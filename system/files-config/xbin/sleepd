#!/system/bin/sh

log() {
    local uptime
    local rest
    read uptime rest < /proc/uptime
    #/system/bin/log -p v -t sleepd "$1"
    echo "$uptime $1"
    echo "$uptime $1" >> /mnt/sdcard/sleepd.log
}

get_uptime() {
    local uptime
    read uptime < /proc/uptime
    echo ${uptime%%.*}
}

am() {
    CLASSPATH=/system/framework/am.jar /system/bin/app_process /system/bin com.android.commands.am.Am "$@"
}

powerkey() {
    CLASSPATH=/system/framework/input.jar /system/bin/app_process /system/bin com.android.commands.input.Input keyevent KEYCODE_POWER
}

check_governor() {
    local governor
    read governor < /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    if [ "$governor" != "interactive" ]
    then
        echo interactive > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
        log "set governor to interactive"
    fi
}


#/system/bin/busybox renice -15 $$
#echo 400000 > /sys/power/device_suspend_time_threshold

marker="== started sleepd $$ at $(busybox date) =="
/system/bin/log -p v -t sleepd "$marker"

state=0
mode="on"

/system/bin/logcat | {
    # ignore log up to $marker
    while read line
    do
        [ "$line" != "${line%$marker*}" ] && break
    done
    log "$marker"

    # start reacting to messages
    while read line
    do
        case "$line" in
        */sleepd*)
            continue  # ignore own messages
            ;;
        *showSystemImage:\ index:-1*)
            log "$line"
            if [ $state = 0]
            then
                am broadcast -a refresh_screen
                log "refresh_screen requested"
            fi
            ;;
        *WindowManager\(*\):\ Window\ freeze\ timeout\ expired.*)
            log "$line"
            am broadcast -a refresh_screen
            log "refresh_screen requested"
            ;;
        *updatePowerState:\ Found\ IDLE\ transfer\ to\ MEM\ state*)
            log "$line"
            if [ $state = 0 ]
            then
                powerkey
                state=1
                log "powerkey, state=1"
            fi
            ;;
        *SYSTEM\ POWER\ STATE:\ \[on\]*)
            log "$line"
            if [ $state = 1 ]
            then
                powerkey
                state=2
                log "powerkey, state=2"
            fi
            mode="on"
            ;;
        *SYSTEM\ POWER\ STATE:\ \[standby\]*)
            log "$line"
            mode="standby"
            ;;
        *SYSTEM\ POWER\ STATE:\ \[mem\]*)
            log "$line"
            if [ $state = 0 ] && [ "$mode" = "standby" ]
            then
                powerkey
                state=1
                log "powerkey, state=1"
            elif [ $state = 2 ]
            then
                state=0
                log "state=0"
            fi
            mode="mem"
            ;;
        *Excessive\ delay\ in\ autosuspend_disable\(\)\ while\ turning\ screen\ on*)
            log "$line"
            ;;
        {*Going\ to\ sleep*|*showSystemImage:\ index*|*handleInterceptActions:*})
            log "$line"
            ;;
        *)
            continue
            ;;
        esac
        check_governor
    done
}
