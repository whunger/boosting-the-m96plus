#!/system/bin/sh
#
# Standby/suspend helper daemon
#
# * detect user inactivity from /proc/interrupts
# * detect power button presses from /proc/interrupts
# * the Hanvon pen is connected to the 2nd uart (IRQ 59)
# * buttons are connected to GPIO pins
#
#  59:     115712       GIC  IMX-uart
#  87:      63859       GIC  i.MX Timer Tick
# 338:          0      GPIO  btn power
# 344:         10      GPIO  btn 4K_pgdn
# 345:         14      GPIO  btn 5K_left
# 346:          8      GPIO  btn 4K_pgup
# 347:         26      GPIO  btn 5K_right
# 348:          6      GPIO  btn 4K_menu
# 349:          4      GPIO  btn 5K_ok
# 350:         10      GPIO  btn 4K_back
# 351:         36      GPIO  btn 5K_up
# 352:          2      GPIO  btn VOL_UP
# 353:         80      GPIO  btn 5K_down
# 354:          4      GPIO  btn VOL_DOWN
#
# * sys.onyx.pwrmode can be one of on/standby/mem
# * to test with adb running use "dumpsys battery set ac 0"
#

timeout=3600  # seconds

get_activity_count() {
    sum_n=0
    while read irq n type name
    do
        if [ "$irq" = "59:" -o \( "${name:0:3}" = "btn" -a "${name:4}" != "power" \) ]
        then
            let sum_n=sum_n+n
        fi
        sum_n=$sum_n
    done < /proc/interrupts
    echo $sum_n
}

get_btn_power_count() {
    while read irq n type name
    do
        if [ "$name" = "btn power" ]
        then
            echo $n
            return
        fi
    done < /proc/interrupts
}

get_uptime() {
    read uptime idle < /proc/uptime
    /system/bin/busybox printf "%.0f" $uptime
}

powerkey() {
    echo "[powerkey]"
    CLASSPATH=/system/framework/input.jar /system/bin/app_process /system/bin com.android.commands.input.Input keyevent KEYCODE_POWER
}

svc() {
    CLASSPATH=/system/framework/svc.jar /system/bin/app_process /system/bin com.android.commands.svc.Svc $*
}

wait_for_mode() {
    echo "waiting for mode $1 ..."
    pwrmode=$(/system/bin/getprop sys.onyx.pwrmode)
    while [ $pwrmode != $1 ]
    do
        sleep 0.2
        pwrmode=$(/system/bin/getprop sys.onyx.pwrmode)
    done
}

do_wake() {
    powerkey
    /system/bin/sleep 0.1
    pwrmode=$(/system/bin/getprop sys.onyx.pwrmode)
    if [ "$pwrmode" != "on" ]
    then
        echo waiting for power ...
        while [ "$pwrmode" != "on" ]
        do
            echo "retrying ..."
            powerkey
            /system/bin/sleep 2
            pwrmode=$(/system/bin/getprop sys.onyx.pwrmode)
        done
    fi
}

ac1=$(get_activity_count)
ac1_pwr=$(get_btn_power_count)
request="none"
last_pwrmode=$(/system/bin/getprop sys.onyx.pwrmode)
last_activity_ts=$(get_uptime)
last_request_ts=$last_activity_ts
last_wakeup_ts=$last_activity_ts
last_sleep_ts=$last_activity_ts
last_pwr_btn_ts=$last_activity_ts

while true
do
    pwrmode=$(/system/bin/getprop sys.onyx.pwrmode)
    read governor < /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    uptime=$(get_uptime)
    echo "pwrmode is $pwrmode, governor is $governor"
    
    if [ "$last_pwrmode" = "mem" -a "$pwrmode" != "mem" ]
    then
        echo "wakeup detected"
        last_wakeup_ts=$uptime
        last_activity_ts=$uptime
    fi
    let wakeup_recency=uptime-last_wakeup_ts

    if [ "$last_pwrmode" != "mem" -a "$pwrmode" = "mem" ]
    then
        echo "sleep detected"
        last_sleep_ts=$uptime
    fi
    let sleep_recency=uptime-last_sleep_ts

    ac2=$(get_activity_count)
    if [ $ac2 -gt $ac1 ]
    then
        echo "input activity detected"
        last_activity_ts=$uptime
        ac1=$ac2
    fi
    let recency=uptime-last_activity_ts

    ac2_pwr=$(get_btn_power_count)
    if [ $ac2_pwr -gt $ac1_pwr ]
    then
        echo "power button press detected"
        last_pwr_btn_ts=$uptime
        ac1_pwr=$ac2_pwr
    fi
    let pwr_btn_recency=uptime-last_pwr_btn_ts

    if [ \( $pwr_btn_recency -gt 2 \) -a \( $pwr_btn_recency -lt 10 \) -a \
         \( $sleep_recency -gt 10 \) -a \( $wakeup_recency -gt 10 \) ]
    then
        echo "button press not detected by system?"
        if [ "$pwrmode" != "mem" ]
        then
            request="sleep"
        else
            request="wake"
            last_activity_ts=$uptime
        fi
    elif [ \( $pwr_btn_recency -gt 10 \) -a "$last_pwrmode" != "mem" -a "$pwrmode" = "mem" ]
    then
        echo "system timed suspend detected"
        request="sleep"
    elif [ "$pwrmode" != "mem" -a \( $recency -gt $timeout \) ]
    then
        echo "activity timeout detected"
        request="sleep"
    elif [ "$pwrmode" = "mem" -a \( $recency -lt 3 \) ]
    then
        echo "wake up activity detected"
        request="wake"
        last_activity_ts=$uptime
    fi
    echo "request is $request"

    let request_recency=uptime-last_request_ts
    if [ "$request" != "none" -a \( $request_recency -lt 10 \) ]
    then
        echo "last request was $request_recency s before, ignoring this request ..."
        request="none"
    fi

    if [ $request = "sleep" ]
    then
        request="none"
        last_request_ts=$uptime
        echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
        # transition from on to mem is fine, from standby to mem keeps screen content
        if [ "$pwrmode" = "on" ]
        then
            powerkey
            wait_for_mode mem
        elif [ "$pwrmode" = "standby" ]
        then
            powerkey
            wait_for_mode mem
            powerkey
            wait_for_mode on
            powerkey
            wait_for_mode mem
        fi
    elif [ $request = "wake" ]
    then
        request="none"
        echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
        do_wake
        uptime=$(get_uptime)
        last_activity_ts=$uptime
        last_request_ts=$uptime
    elif [ "$governor" != "interactive" ]
    then
        echo interactive > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    else
        /system/bin/sleep 1
    fi
    last_pwrmode=$pwrmode
done
