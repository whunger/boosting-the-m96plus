#!/system/bin/sh

if [ -z "$1" ]
then
    while true
    do
        /system/bin/logwrapper "$0" wrapped
        rc=$?
        [ $rc != 33 ] && break
    done
    exit $rc
fi

log() {
    echo >&2 "$1"
    [ -e "/mnt/sdcard/sleepd.log" ] && echo "$(/system/bin/busybox date) $1" >> /mnt/sdcard/sleepd.log
}

am() {
    CLASSPATH=/system/framework/am.jar /system/bin/app_process /system/bin com.android.commands.am.Am "$@"
}

settings() {
    CLASSPATH=/system/framework/settings.jar /system/bin/app_process /system/bin com.android.commands.settings.SettingsCmd "$@"
}

powerkey() {
    CLASSPATH=/system/framework/input.jar /system/bin/app_process /system/bin com.android.commands.input.Input keyevent KEYCODE_POWER
}

get_uptime() {
    local uptime
    read uptime < /proc/uptime
    echo ${uptime%%.*}
}

get_n_blocked() {
    local label
    local v0
    local rest
    while read label v0 rest
    do
        if [ "$label" == "procs_blocked" ]
        then
            echo $v0
            break
        fi
    done < /proc/stat
}

check_governor() {
    local governor
    local target
    if [ "$1" == "auto" ]
    then
        if [ "$(get_n_blocked)" == "0" ]
        then
            target="interactive"
        else
            target="performance"
        fi
    else
        target="$1"
    fi
    read governor < /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    if [ "$governor" != "$target" ]
    then
        echo "$target" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
        log "set governor to $target"
        return 0
    fi
    return 1
}

sleepd() {
    # ignore log up to $marker
    while read line
    do
        [ "$line" != "${line%$marker*}" ] && break
    done

    # start reacting to messages
    time=$(get_uptime)
    last_line_ts=${line:0:14}  # 10-30 01:50:39
    ping_time=$((time+60))
    ping_count=0
    exit_time=$((time+3600*24))
    mode="on"
    suspend_time=$((time+5))
    state=0  # state for simulated PWRBTN presses
    sequence_start_time=0
    refresh_allowed=1
    while read line
    do
        line_ts=${line:0:14}
        if [ "$last_line_ts" != "$line_ts" ]
        then
            time=$(get_uptime)
            last_line_ts=$line_ts
        fi
        # check for messages to react to
        trigger=""
        case "$line" in
        */sleepd*)
            # Still in sync
            ping_time=$((time+60))
            ping_count=3
            continue  # loop, do not interpret own log messages
            ;;
        *WindowManager\(*\):\ Window\ freeze\ timeout\ expired.*)
            log "$line"
            #trigger="refresh_screen"
            ;;
        *showSystemImage:\ index:-1*)
            log "$line"
            #trigger="refresh_screen"
            ;;
        *showSystemImage:\ index:0*)
            log "$line"
            trigger="show_wallpaper"
            ;;
        *updatePowerState:\ Found\ IDLE\ transfer\ to\ MEM\ state*)
            log "$line"
            trigger="enter_suspend"
            ;;
        *handleInterceptActions:\ Waking\ up*)
            log "$line"
            #trigger="wakeup"
            ;;
        *handleInterceptActions:\ Not\ passing\ key\ to\ user*)
            log "$line"
            #trigger="enter_suspend"
            ;;
        *Going\ to\ sleep\ by\ user\ request...*)
            log "$line"
            trigger="enter_suspend"
            ;;
        *Go\ to\ Sleep\ as\ POWER\ key\ is\ pressed*)
            log "$line"
            trigger="enter_suspend"
            ;;
        *Going\ to\ sleep\ due\ to\ screen\ timeout...*)
            log "$line"
            #trigger="enter_suspend"
            ;;
        *SYSTEM\ POWER\ STATE:\ \[mem\]*)
            log "$line"
            mode="mem"
            trigger="sleep"
            ;;
        *SYSTEM\ POWER\ STATE:\ \[on\]*)
            log "$line"
            mode="on"
            trigger="wakeup_or_sleep"
            ;;
        *SYSTEM\ POWER\ STATE:\ \[standby\]*)
            log "$line"
            mode="standby"
            trigger="throttle"
            ;;
        *Excessive\ delay*while\ turning\ screen\ on*)
            log "$line"
            #trigger="refresh_screen"
            ;;
        *Excessive\ delay*)
            log "$line"
            ;;
        *Going\ to\ sleep*)
            log "$line"
            ;;
        *showSystemImage:*)
            log "$line"
            ;;
        *handleInterceptActions:*)
            log "$line"
            ;;
        *screen*)
            log "$line"
            ;;
        *Power*)
            log "$line"
            ;;
        *power*)
            log "$line"
            ;;
        *POWER*)
            log "$line"
            ;;
        *update_to_display*)
            check_governor performance && log "$line"
            state=0
            ;;
        esac

        # state maintenance
        if [ $((time-sequence_start_time)) -gt 45 ]
        then
            state=0
        fi

        # reactors
        if [ "$trigger" = "refresh_screen" ] && [ $time -gt $suspend_time ] && [ $mode = "on" ]
        then
            am broadcast -a refresh_screen &
            log "$trigger: refresh_screen, suspend for 5 s"
            suspend_time=$((time+5))
            state=0
        elif [ "$trigger" = "enter_suspend" ] && [ $time -gt $suspend_time ]
        then
            check_governor performance
            # Try to get rid of pops:
            /system/bin/tinymix "Playback Volume" 0
            log "$trigger: governor=performance, volume=0, state=1, suspend for 30 s"
            state=1
            suspend_time=$((time+30))
            sequence_start_time=$time
        elif [ "$trigger" = "show_wallpaper" ] && [ $state = 1 ]
        then
            powerkey &
            log "$trigger: powerkey (1), state=2"
            state=2
        elif [ "$trigger" = "wakeup_or_sleep" ] && [ $state = 2 ]
        then
            powerkey &
            log "$trigger: powerkey (2), state=3"
            state=3
        elif [ "$trigger" = "sleep" ] && [ $state = 3 ]
        then
            log "$trigger: state=0, reset suspend, refresh_allowed=1, sleeping now ..."
            state=0  # time to do nothing, at last
            suspend_time=0
            refresh_allowed=1
        elif [ "$trigger" = "wakeup_or_sleep" ] && [ $state = 0 ]
        then
            log "$trigger: wakeup, governor=auto, volume restore, reset suspend"
            check_governor auto
            # Restore volume
            /system/bin/tinymix "Playback Volume" 250
            suspend_time=0
            if [ $refresh_allowed = 1 ]
            then
                refresh_allowed=0
                am broadcast -a refresh_screen &
                log "$trigger: refresh_screen, refresh_allowed=0"
            fi
        elif [ "$trigger" = "wakeup_or_sleep" ]
        then
            log "$trigger: state=$state? >> refresh_screen, state=0, reset suspend"
            state=0
            suspend_time=0
            if [ $refresh_allowed = 1 ]
            then
                refresh_allowed=0
                am broadcast -a refresh_screen &
                log "$trigger: refresh_screen, refresh_allowed=0"
            fi
        elif [ "$trigger" = "throttle" ]
        then
            log "throttle: governor=auto"
            check_governor auto
        elif [ -n "$trigger" ]
        then
            log "$trigger: ignored, state=$state, suspend_time=$suspend_time"
        fi

        # check if logcat - sleepd - logwrapper loop is still working
        if [ $time -ge $ping_time ] && [ $ping_count -gt 0 ]
        then
            log "ping"
            #echo >&2 "ping"
            ping_count=$((ping_count-1))
            ping_time=$((time+5))
            if [ $ping_count = 0 ]
            then
                exit_time=$((time+1))
            fi
        elif [ $time -ge $exit_time ]
        then
            log "exiting to induce restart"
            exit 33
        fi
    done
}


marker="== started sleepd $$ at $(busybox date) =="
log "$marker"

#/system/bin/busybox renice -10 $$
echo 400000 > /sys/power/device_suspend_time_threshold
/system/bin/busybox renice 19 $(/system/bin/busybox pgrep "mmcqd/1")

# Testing: Can we do s.th. against loudspeaker pops?
/system/bin/tinymix "Capture Volume" 0
/system/bin/tinymix "Right Boost Mixer RINPUT1 Switch" 0
/system/bin/tinymix "Left Boost Mixer LINPUT1 Switch" 0

#settings set system screen_off_timeout 300000
log "System's screen off timeout is set to $(($(settings get system screen_off_timeout)/1000)) s"

/system/bin/logcat -b system -b main -b events | sleepd

# Todo: React to these by waking the device up?
#10-03 20:06:01.070 D/InputManager-JNI( 2371): handleInterceptActions: Waking up.
#10-03 20:06:01.090 I/InputDispatcher( 2371): Dropped event because input dispatch is disabled.
#10-03 20:06:01.090 D/pms     ( 2371): userActivityNoUpdateLocked: reject all events except the POWER/FORCE_WAKEUP key
#10-15 09:30:04.330 W/audio_hw_primary( 2017): set parameters screen_state=off
#Screen released, type=0 flinger=0x410d0690
#screen update disabled

# Can refresh help to force wallpaper display?

# No use: Fixing brightness with
# /sys/devices/platform/pwm-backlight.0/backlight/pwm-backlight.0/actual_brightness
# /sys/devices/platform/pwm-backlight.0/backlight/pwm-backlight.0/brightness
